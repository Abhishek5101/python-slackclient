from typing import List, Set, Union

from .elements import BlockElement, InteractiveElement
from .objects import (
    JsonObject,
    JsonValidator,
    MarkdownTextObject,
    PlainTextObject,
    TextObject,
    extract_json,
)


class Block(JsonObject):
    attributes = {"type", "block_id"}

    def __init__(self, *, type: str, block_id: str = None):
        self.type = type
        self.block_id = block_id
        self.color = None

    @JsonValidator("block_id cannot exceed 255 characters")
    def block_id_length(self):
        return self.block_id is None or len(self.block_id) <= 255


class DividerBlock(Block):
    def __init__(self):
        """
        A simple divider - equivalent to <hr>
        https://api.slack.com/reference/messaging/blocks#divider
        """
        super().__init__(type="divider")


class SectionBlock(Block):
    def __init__(
        self,
        *,
        text: Union[str, TextObject] = None,
        fields: List[str] = None,
        block_id: str = None,
        accessory: BlockElement = None,
    ):
        """
        A general purpose block capable of holding text, fields (displayed in a
        semi-tabular format) and one 'accessory' element
        https://api.slack.com/reference/messaging/blocks#section

        :param text: either a plain string, or a richer TextObject

        :param fields: optional: a sequence of strings that will be rendered using
        MarkdownTextObjects

        :param block_id: ID to be used for this block - autogenerated if left blank.
        Cannot exceed 255 characters.

        :param accessory: an optional BlockElement to attach to this SectionBlock as
        secondary content
        """
        super().__init__(type="section", block_id=block_id)
        self.text = text
        self.fields = fields or []
        self.accessory = accessory

    @JsonValidator("text or fields attribute must be specified")
    def text_or_fields_populated(self):
        return self.text is not None or self.fields is not None

    @JsonValidator("fields attribute cannot exceed 10 items")
    def fields_length(self):
        return self.fields is None or len(self.fields) <= 10

    def get_json(self) -> dict:
        json = super().get_json()
        if self.text is not None:
            if isinstance(self.text, TextObject):
                json["text"] = self.text.get_json()
            else:
                json["text"] = MarkdownTextObject.from_string(self.text)
        if self.fields:
            json["fields"] = [
                MarkdownTextObject.from_string(field) for field in self.fields
            ]
        if self.accessory is not None:
            json["accessory"] = extract_json(self.accessory, BlockElement)
        return json


class ImageBlock(Block):
    @property
    def attributes(self) -> Set[str]:
        return super().attributes.union({"image_url", "alt_text"})

    def __init__(
        self, *, image_url: str, alt_text: str, title: str = None, block_id: str = None
    ):
        """
        A simple image block, designed to make those cat photos really pop.
        https://api.slack.com/reference/messaging/blocks#image

        :param image_url: Publicly hosted URL to be displayed. Cannot exceed 3000
        characters.

        :param alt_text: Plain text summary of image. Cannot exceed 2000 characters.

        :param title: A title to be displayed above the image. Cannot exceed 2000
        characters.

        :param block_id: ID to be used for this block - autogenerated if left blank.
        Cannot exceed 255 characters.
        """
        super().__init__(type="image", block_id=block_id)
        self.image_url = image_url
        self.alt_text = alt_text
        self.title = title

    @JsonValidator("image_url attribute cannot exceed 3000 characters")
    def image_url_length(self):
        return len(self.image_url) <= 3000

    @JsonValidator("alt_text attribute cannot exceed 3000 characters")
    def alt_text_length(self):
        return len(self.alt_text) <= 2000

    @JsonValidator("title attribute cannot exceed 2000 characters")
    def title_length(self):
        return self.title is None or len(self.title) <= 2000

    def get_json(self) -> dict:
        json = super().get_json()
        if self.title is not None:
            json["title"] = PlainTextObject.from_string(self.title)
        return json


class ActionsBlock(Block):
    def __init__(self, *, elements: List[InteractiveElement], block_id: str = None):
        """
        A block that is used to hold interactive elements.
        https://api.slack.com/reference/messaging/blocks#actions

        :param elements: Up to 5 element objects - buttons, date pickers, etc

        :param block_id: ID to be used for this block - autogenerated if left blank.
        Cannot exceed 255 characters.
        """
        super().__init__(type="actions", block_id=block_id)
        self.elements = elements

    @JsonValidator("elements attribute cannot exceed 5 elements")
    def elements_length(self):
        return len(self.elements) <= 5

    def get_json(self) -> dict:
        json = super().get_json()
        json["elements"] = extract_json(self.elements, BlockElement)
        return json


class ContextBlock(Block):
    def __init__(
        self, *, elements: List[Union[ImageBlock, TextObject]], block_id: str = None
    ):
        """
        Displays message context, which can include both images and text.
        https://api.slack.com/reference/messaging/blocks#context

        :param elements: Up to 10 ImageElements and TextObjects

        :param block_id: ID to be used for this block - autogenerated if left blank.
        Cannot exceed 255 characters.
        """
        super().__init__(type="context", block_id=block_id)
        self.elements = elements

    @JsonValidator("elements attribute cannot exceed 10 elements")
    def elements_length(self):
        return len(self.elements) <= 10

    def get_json(self) -> dict:
        json = super().get_json()
        json["elements"] = extract_json(self.elements, BlockElement)
        return json
